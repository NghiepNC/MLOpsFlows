{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"src/utils/","title":"docs/src/utils.md","text":""},{"location":"src/utils/#src.utils.load_dict","title":"<code>load_dict(filepath)</code>","text":"<p>Load a dictionary from a JSON's filepath.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>location of file.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>loaded JSON data.</p> Source code in <code>src/utils.py</code> <pre><code>def load_dict(filepath: str) -&gt; Dict:\n\"\"\"Load a dictionary from a JSON's filepath.\n    Args:\n        filepath (str): location of file.\n    Returns:\n        Dict: loaded JSON data.\n    \"\"\"\n    with open(filepath) as fp:\n        d = json.load(fp)\n    return d\n</code></pre>"},{"location":"src/utils/#src.utils.save_dict","title":"<code>save_dict(d, filepath, cls=None, sortkeys=False)</code>","text":"<p>Save a dictionary to a specific location.</p> <p>Parameters:</p> Name Type Description Default <code>d</code> <code>Dict</code> <p>data to save.</p> required <code>filepath</code> <code>str</code> <p>location of where to save the data.</p> required <code>cls</code> <code>optional</code> <p>encoder to use on dict data. Defaults to None.</p> <code>None</code> <code>sortkeys</code> <code>bool</code> <p>whether to sort keys alphabetically. Defaults to False.</p> <code>False</code> Source code in <code>src/utils.py</code> <pre><code>def save_dict(d: Dict, filepath: str, cls=None, sortkeys: bool = False) -&gt; None:\n\"\"\"Save a dictionary to a specific location.\n    Args:\n        d (Dict): data to save.\n        filepath (str): location of where to save the data.\n        cls (optional): encoder to use on dict data. Defaults to None.\n        sortkeys (bool, optional): whether to sort keys alphabetically. Defaults to False.\n    \"\"\"\n    with open(filepath, \"w\") as fp:\n        json.dump(d, indent=2, fp=fp, cls=cls, sort_keys=sortkeys)\n        fp.write(\"\\n\")\n</code></pre>"},{"location":"src/utils/#src.utils.set_seeds","title":"<code>set_seeds(seed=42)</code>","text":"<p>Set seed for reproducibility.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>number to be used as the seed. Defaults to 42.</p> <code>42</code> Source code in <code>src/utils.py</code> <pre><code>def set_seeds(seed: int = 42) -&gt; None:\n\"\"\"Set seed for reproducibility.\n    Args:\n        seed (int, optional): number to be used as the seed. Defaults to 42.\n    \"\"\"\n    # Set seeds\n    np.random.seed(seed)\n    random.seed(seed)\n</code></pre>"}]}